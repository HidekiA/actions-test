name: Called CloudFormation

on:
  workflow_call:
    inputs:
      # dry-run
      CREATE_CHANGESET:
        required: true
        type: boolean
        default: false
      # execute
      DEPLOY:
        required: true
        type: boolean
        default: false

      # stack
      STACK_NAME:
        required: true
        type: string
      WORKING_DIRECTORY:
        required: true
        type: string

      # file
      TEMPLATE_FILE:
        required: false
        type: string
        default: template.yaml
      PARAMETER_FILE:
        required: false
        type: string
        default: parameters.txt

      # optional
      STACK_NAME_PREFIX:
        required: false
        type: string
        default: 'cicd-api-'
      AWS_REGION:
        required: false
        type: string
        default: ap-northeast-1
      CFN_CAPABILITIES:
        required: false
        type: string
        default: CAPABILITY_IAM
      PYTHON_VERSION:
        required: false
        type: string
        default: '3.9'

    secrets:
      ACTION_ROLE:
        required: true
      DEPLOY_ROLE:
        required: true
      TEMPLATE_BUCKET:
        required: true
      AWS_ACCOUNT_ID:
        required: true


permissions: 
  contents: read
  id-token: write
  pull-requests: write


jobs:
  CloudFormation:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: ${{ github.event.pull_request.base.ref || github.ref_name }}
    env:
      STACK_NAME: ${{ inputs.STACK_NAME_PREFIX }}${{ inputs.STACK_NAME }}
      # STAGE_NAME: ${{ github.event.pull_request.base.ref || github.ref_name }}
      STAGE_NAME: sandbox
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    steps:
      - uses: actions/checkout@v3

      # AWS settings
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ACTION_ROLE }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: cli version & id
        run: |-
          aws --version
          aws sts get-caller-identity

      # Create & show changeset
      - name: create changeset
        if: inputs.CREATE_CHANGESET
        run: |-
          aws cloudformation deploy \
            --no-execute-changeset \
            --no-fail-on-empty-changeset \
            --template-file ${{ inputs.TEMPLATE_FILE }} \
            --role-arn ${{ secrets.DEPLOY_ROLE }} \
            --s3-bucket ${{ secrets.TEMPLATE_BUCKET }} \
            --s3-prefix "${{ secrets.AWS_ACCOUNT_ID }}/${{ env.STACK_NAME }}-${{ env.STAGE_NAME }}" \
            --stack-name "${{ env.STACK_NAME }}" \
            --capabilities ${{ inputs.CFN_CAPABILITIES }} \
            --parameter-overrides `cat ${{ inputs.PARAMETER_FILE }} | \
              sed -E 's@^#.*$@@g' | \
              sed -E 's@^(StageName=).*$@@g' | \
              sed -E 's@^(BASE_URL=).*$@@g'` \
              StageName="${{ env.STAGE_NAME }}" \
              BASE_URL="${{ secrets.URL }}" \
            > result.txt 2>&1

      - name: show create-changeset result
        if: inputs.CREATE_CHANGESET && always()
        run: |-
          cat result.txt

      - name: get create-changeset arn
        if: inputs.CREATE_CHANGESET
        run: |-
          cat result.txt | \
            grep 'arn:aws:cloudformation' | \
            sed -z 's@.*\(arn:aws:cloudformation:[^ \n$]*\).*@CHANGESET_ARN=\1@g' >> $GITHUB_ENV

      - name: describe changeset
        if: inputs.CREATE_CHANGESET && github.event_name == 'pull_request' && env.CHANGESET_ARN
        run: |-
          echo "CHANGESET_REPORT<<EOF" >> $GITHUB_ENV
          aws cloudformation describe-change-set \
            --change-set-name ${{ env.CHANGESET_ARN }} \
            | jq '.Changes[].ResourceChange | {Operation: .Action, LogicalId: .LogicalResourceId, Type: .ResourceType, Replacement: .Replacement}' \
            >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment on Pull Request
        uses: actions/github-script@v6
        if: inputs.CREATE_CHANGESET && github.event_name == 'pull_request'
        with:
          script: |
            const report = `${{ env.CHANGESET_REPORT }}`;
            const body = '## ${{ env.STACK_NAME }} changeset\n' +
              (report === '' ? '### No changes to deploy.\n' : ('```\n' + report + '\n```\n')) + 
              '*Pusher: @${{ github.actor }}*';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            });

      # Deploy
      - name: deploy
        if: inputs.DEPLOY
        run: |-
          aws cloudformation deploy \
            --no-fail-on-empty-changeset \
            --template-file ${{ inputs.TEMPLATE_FILE }} \
            --role-arn ${{ secrets.DEPLOY_ROLE }} \
            --s3-bucket ${{ secrets.TEMPLATE_BUCKET }} \
            --s3-prefix "${{ secrets.AWS_ACCOUNT_ID }}/${{ env.STACK_NAME }}-${{ env.STAGE_NAME }}" \
            --stack-name "${{ env.STACK_NAME }}" \
            --capabilities ${{ inputs.CFN_CAPABILITIES }} \
            --parameter-overrides `cat ${{ inputs.PARAMETER_FILE }} | \
              sed -E 's@^#.*$@@g' | \
              sed -E 's@^(StageName=).*$@@g' | \
              sed -E 's@^(BASE_URL=).*$@@g'` \
              StageName="${{ env.STAGE_NAME }}" \
              BASE_URL="${{ secrets.URL }}"
